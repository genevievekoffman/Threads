
public class SharedQ {
	public int cakesBaked;
	public int numCustomer; //total amount of customers who have been here (gives id's to customers) 
	public int serving; //which # cake is being served
	public int currAmnt; // current amount of customers
	
	public SharedQ() {
		this.cakesBaked = 0;
		this.numCustomer = 0;
		this.serving = 0;
		this.currAmnt = 0;
	}
	
	public int getNumCustom() {  
		synchronized(this) {
			return this.numCustomer;
		}
	}
	
	public int getCakesBaked() { //returns the amount of cakes baked
		synchronized(this) {
			return this.cakesBaked;
		}
	}
	
	public void increase(int id) { //another customer has entered with this id
		synchronized(this) {
			System.out.println("customer_" + id + " has ordered a cake");
			this.numCustomer ++; 
			this.currAmnt ++; 
		}
	}
	
	public void bakeCake() {
		synchronized(this) {
			this.cakesBaked ++; //another cake has baked
			System.out.println("A cake is done!");
		}
	}
	
	public void serveCake() {
		synchronized(this) {
			this.notify(); //releases a costumer
		}
	}
	
	public void waitForCake(int id) { //needs the customers id
		synchronized(this) {
			System.out.println("customer_" + id + " waiting ...");
			try {
				this.wait(); //put into the wait section
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			if (this.serving == id) {
				System.out.println("customer_" + id + " has been served their cake");
				this.cakesBaked --; //one cake is served
				this.serving ++; //another cake has been served
				this.currAmnt --;
			}
		}
	}
	
	public boolean checkIfDone() { //returns true if baker can stop
		if (this.currAmnt == 0) {
			return true;
		} else {
			return false;
		}
	}
	
}
